<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        5PK/3pZoqNVwMEgAAAAASUVORK5CYII=
</value>
  </data>
</root>